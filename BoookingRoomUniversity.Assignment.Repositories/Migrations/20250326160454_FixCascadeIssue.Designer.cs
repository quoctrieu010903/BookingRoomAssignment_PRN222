// <auto-generated />
using System;
using BoookingRoomUniversity.Assignment.Repositories.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoookingRoomUniversity.Assignment.Repositories.Migrations
{
    [DbContext(typeof(BookingRoomUniversityDbContext))]
    [Migration("20250326160454_FixCascadeIssue")]
    partial class FixCascadeIssue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomId1");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampusId"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CampusId");

                    b.ToTable("Campuses");

                    b.HasData(
                        new
                        {
                            CampusId = 1,
                            CreatedTime = new DateTime(2025, 3, 26, 23, 4, 54, 112, DateTimeKind.Local).AddTicks(5569),
                            Location = "Khu Công Nghệ Cao, Quận 9, TP.HCM",
                            Name = "FPT University Hồ Chí Minh"
                        },
                        new
                        {
                            CampusId = 2,
                            CreatedTime = new DateTime(2025, 3, 26, 23, 4, 54, 112, DateTimeKind.Local).AddTicks(5593),
                            Location = "Hòa Lạc, Thạch Thất, Hà Nội",
                            Name = "FPT University Hà Nội"
                        },
                        new
                        {
                            CampusId = 3,
                            CreatedTime = new DateTime(2025, 3, 26, 23, 4, 54, 112, DateTimeKind.Local).AddTicks(5595),
                            Location = "Quận Ninh Kiều, TP. Cần Thơ",
                            Name = "FPT University Cần Thơ"
                        },
                        new
                        {
                            CampusId = 4,
                            CreatedTime = new DateTime(2025, 3, 26, 23, 4, 54, 112, DateTimeKind.Local).AddTicks(5597),
                            Location = "Ngũ Hành Sơn, TP. Đà Nẵng",
                            Name = "FPT University Đà Nẵng"
                        },
                        new
                        {
                            CampusId = 5,
                            CreatedTime = new DateTime(2025, 3, 26, 23, 4, 54, 112, DateTimeKind.Local).AddTicks(5599),
                            Location = "Khu Đô thị Khoa học Quy Hòa, TP. Quy Nhơn",
                            Name = "FPT University Quy Nhơn"
                        });
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CampusId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomId");

                    b.HasIndex("CampusId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId1")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoomUser", b =>
                {
                    b.Property<int>("RoomsRoomId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RoomsRoomId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoomUser");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Booking", b =>
                {
                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Room", null)
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId1");

                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Department", b =>
                {
                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Campus", "Campus")
                        .WithMany("Departments")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Room", b =>
                {
                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Campus", "Campus")
                        .WithMany("Rooms")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.User", b =>
                {
                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Department", null)
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId1");

                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoomUser", b =>
                {
                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoookingRoomUniversity.Assignment.Repositories.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Campus", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BoookingRoomUniversity.Assignment.Repositories.Entities.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
